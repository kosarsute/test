"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileSearcher = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
class FileSearcher {
    /**
     * Finds all files in the given directory and its subdirectories
     * that were created after the specified time.
     *
     * @param screenshotFolderPath Path to the folder with screenshots.
     * @param specFileName Name of the spec file.
     * @param time Time threshold as a Date object.
     * @returns Array of absolute paths to the matching files.
     */
    static findFilesBeforeTime(screenshotFolderPath, specFileName, time) {
        const absolutePath = path.resolve(process.cwd(), screenshotFolderPath);
        const result = [];
        const paths = this.findFolderByName(absolutePath, specFileName);
        if (paths.length === 0) {
            return result;
        }
        const searchFiles = (dir) => {
            if (!fs.existsSync(dir)) {
                return;
            }
            const entries = fs.readdirSync(dir, { withFileTypes: true });
            for (const entry of entries) {
                const entryPath = path.join(dir, entry.name);
                if (entry.isDirectory()) {
                    searchFiles(entryPath);
                }
                else if (entry.isFile()) {
                    const stats = fs.statSync(entryPath);
                    if (stats.birthtime > time) {
                        result.push(entryPath);
                    }
                }
            }
        };
        for (const path of paths) {
            searchFiles(path);
        }
        return result;
    }
    static findFolderByName(startPath, folderName) {
        const result = [];
        function searchDirectory(currentPath) {
            if (!fs.existsSync(currentPath)) {
                return;
            }
            const items = fs.readdirSync(currentPath, { withFileTypes: true });
            for (const item of items) {
                const itemPath = path.join(currentPath, item.name);
                if (item.isDirectory()) {
                    if (item.name === folderName) {
                        result.push(itemPath);
                    }
                    else {
                        searchDirectory(itemPath);
                    }
                }
            }
        }
        searchDirectory(startPath);
        return result;
    }
}
exports.FileSearcher = FileSearcher;
